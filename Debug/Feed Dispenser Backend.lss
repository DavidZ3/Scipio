
Feed Dispenser Backend.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000476  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016eb  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000caf  00000000  00000000  00001d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a16  00000000  00000000  00002a36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002bc  00000000  00000000  0000344c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000074e  00000000  00000000  00003708  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000803  00000000  00000000  00003e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00004659  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 20 01 	call	0x240	; 0x240 <main>
  9e:	0c 94 39 02 	jmp	0x472	; 0x472 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <button_Get>:
// Bit 4:   Down
// Bit 5:   Set_Feed
// Bit 6:   None
// Bit 7:   (Not used/don't care)
Buttons button_Get(uint8_t* previous)
{
  a6:	fc 01       	movw	r30, r24
    // Reads the buttons for positive edge triggering
    for(int port_Num = 0; port_Num < NUM_OF_INPUTS; port_Num++)
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
	{
        // If an button is just pressed (rising edge), then return the button pressed
        if(((PINB & (0b1 << port_Num)) != 0) && 
  ac:	23 b1       	in	r18, 0x03	; 3
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	04 2e       	mov	r0, r20
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <button_Get+0x12>
  b4:	35 95       	asr	r19
  b6:	27 95       	ror	r18
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <button_Get+0xe>
  bc:	20 ff       	sbrs	r18, 0
  be:	17 c0       	rjmp	.+46     	; 0xee <button_Get+0x48>
			((*previous & (0b1 << port_Num)) != 0))
  c0:	90 81       	ld	r25, Z
{
    // Reads the buttons for positive edge triggering
    for(int port_Num = 0; port_Num < NUM_OF_INPUTS; port_Num++)
	{
        // If an button is just pressed (rising edge), then return the button pressed
        if(((PINB & (0b1 << port_Num)) != 0) && 
  c2:	29 2f       	mov	r18, r25
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	04 2e       	mov	r0, r20
  c8:	02 c0       	rjmp	.+4      	; 0xce <button_Get+0x28>
  ca:	35 95       	asr	r19
  cc:	27 95       	ror	r18
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <button_Get+0x24>
  d2:	20 ff       	sbrs	r18, 0
  d4:	0c c0       	rjmp	.+24     	; 0xee <button_Get+0x48>
			((*previous & (0b1 << port_Num)) != 0))
			{
                *previous |= (0b1 << port_Num);
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	04 2e       	mov	r0, r20
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <button_Get+0x3c>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <button_Get+0x38>
  e6:	92 2b       	or	r25, r18
  e8:	90 83       	st	Z, r25
                return (Buttons) port_Num;
  ea:	84 2f       	mov	r24, r20
  ec:	08 95       	ret
// Bit 6:   None
// Bit 7:   (Not used/don't care)
Buttons button_Get(uint8_t* previous)
{
    // Reads the buttons for positive edge triggering
    for(int port_Num = 0; port_Num < NUM_OF_INPUTS; port_Num++)
  ee:	4f 5f       	subi	r20, 0xFF	; 255
  f0:	5f 4f       	sbci	r21, 0xFF	; 255
  f2:	46 30       	cpi	r20, 0x06	; 6
  f4:	51 05       	cpc	r21, r1
  f6:	d1 f6       	brne	.-76     	; 0xac <button_Get+0x6>
			{
                *previous |= (0b1 << port_Num);
                return (Buttons) port_Num;
            }
	}
    return None;   // If no buttons have been pressed return NO_INPUTS
  f8:	86 e0       	ldi	r24, 0x06	; 6
}
  fa:	08 95       	ret

000000fc <button_Action>:



void button_Action(Buttons button_Pressed)
{
  fc:	08 95       	ret

000000fe <disp_Init>:
#include "display.h"
#include "i2c.h"

void disp_Init()
{
    I2C_Init();         // Initalise the I2C module.
  fe:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_Init>
    I2C_Start();        // Start the I2C communications.
 102:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <I2C_Start>
    
    I2C_Write(C_DisplayWriteMode_U8);
 106:	82 ee       	ldi	r24, 0xE2	; 226
 108:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
    I2C_Write(0x05);
 10c:	85 e0       	ldi	r24, 0x05	; 5
 10e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
    I2C_Write(0x01);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
    I2C_Write(0x02);
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
    I2C_Write(0x03);
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
    I2C_Write(0x04);
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
	// Do stuff
	
	I2C_Stop();
 12a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <I2C_Stop>
 12e:	08 95       	ret

00000130 <EEPROM_WriteByte>:
 * description: This function is used to write the data at specified EEPROM_address..

 **************************************************************************************************/
void EEPROM_WriteByte(uint16_t var_eepromAddress_u16, uint8_t var_eepromData_u8)
{
	while(util_IsBitSet(EECR,EEPE)); // Wait for completion of previous write.
 130:	f9 99       	sbic	0x1f, 1	; 31
 132:	fe cf       	rjmp	.-4      	; 0x130 <EEPROM_WriteByte>
	                                 // EEPE will be cleared by hardware once Eeprom write is completed.

	EEAR = var_eepromAddress_u16;  //Load the eeprom address and data
 134:	92 bd       	out	0x22, r25	; 34
 136:	81 bd       	out	0x21, r24	; 33
	EEDR = var_eepromData_u8;
 138:	60 bd       	out	0x20, r22	; 32

	util_BitSet(EECR,EEMPE);    // Eeprom Master Write Enable
 13a:	fa 9a       	sbi	0x1f, 2	; 31
	util_BitSet(EECR,EEPE);     // Start eeprom write by setting EEPE
 13c:	f9 9a       	sbi	0x1f, 1	; 31
 13e:	08 95       	ret

00000140 <EEPROM_ReadByte>:

 * description: This function is used to read the data from specified EEPROM_address.        
 ***************************************************************************************************/
uint8_t EEPROM_ReadByte(uint16_t var_eepromAddress_u16)
{
	while(util_IsBitSet(EECR,EEPE));  //Wait for completion of previous write if any.
 140:	f9 99       	sbic	0x1f, 1	; 31
 142:	fe cf       	rjmp	.-4      	; 0x140 <EEPROM_ReadByte>

	EEAR = var_eepromAddress_u16;    //Load the address from where the data needs to be read.
 144:	92 bd       	out	0x22, r25	; 34
 146:	81 bd       	out	0x21, r24	; 33
	util_BitSet(EECR,EERE);   // start eeprom read by setting EERE
 148:	f8 9a       	sbi	0x1f, 0	; 31

	return EEDR;             // Return data from data register
 14a:	80 b5       	in	r24, 0x20	; 32
}
 14c:	08 95       	ret

0000014e <EEPROM_WriteNBytes>:
 * description:
            This function is used to write N-bytes of data at specified EEPROM_address.
 ***************************************************************************************************/
#if ( ENABLE_EEPROM_WriteNBytes == 1)
void EEPROM_WriteNBytes(uint16_t var_eepromAddress_u16, uint8_t *ptr_ramAddress_u8, uint16_t var_numOfBytes_u16)
{
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	8c 01       	movw	r16, r24
 15c:	7b 01       	movw	r14, r22
 15e:	ea 01       	movw	r28, r20
	while(var_numOfBytes_u16 !=  0)
 160:	20 97       	sbiw	r28, 0x00	; 0
 162:	51 f0       	breq	.+20     	; 0x178 <EEPROM_WriteNBytes+0x2a>
	{
		EEPROM_WriteByte(var_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
 164:	f7 01       	movw	r30, r14
 166:	61 91       	ld	r22, Z+
 168:	7f 01       	movw	r14, r30
 16a:	c8 01       	movw	r24, r16
 16c:	0e 94 98 00 	call	0x130	; 0x130 <EEPROM_WriteByte>
		var_eepromAddress_u16++;					   //Increment the Eeprom Address
 170:	0f 5f       	subi	r16, 0xFF	; 255
 172:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		var_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
 174:	21 97       	sbiw	r28, 0x01	; 1
            This function is used to write N-bytes of data at specified EEPROM_address.
 ***************************************************************************************************/
#if ( ENABLE_EEPROM_WriteNBytes == 1)
void EEPROM_WriteNBytes(uint16_t var_eepromAddress_u16, uint8_t *ptr_ramAddress_u8, uint16_t var_numOfBytes_u16)
{
	while(var_numOfBytes_u16 !=  0)
 176:	b1 f7       	brne	.-20     	; 0x164 <EEPROM_WriteNBytes+0x16>
		EEPROM_WriteByte(var_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
		var_eepromAddress_u16++;					   //Increment the Eeprom Address
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		var_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
	}
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	08 95       	ret

00000186 <EEPROM_ReadNBytes>:

	##Note:	Care should be taken to allocate enough buffer to read the data.
 ***************************************************************************************************/
#if ( ENABLE_EEPROM_ReadNBytes == 1)
void EEPROM_ReadNBytes(uint16_t var_eepromAddress_16, uint8_t *ptr_ramAddress_u8, uint16_t var_numOfBytes_u16)
{
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	8c 01       	movw	r16, r24
 194:	7b 01       	movw	r14, r22
 196:	ea 01       	movw	r28, r20
	while(var_numOfBytes_u16 !=  0)
 198:	20 97       	sbiw	r28, 0x00	; 0
 19a:	51 f0       	breq	.+20     	; 0x1b0 <EEPROM_ReadNBytes+0x2a>
	{
		*ptr_ramAddress_u8 = EEPROM_ReadByte(var_eepromAddress_16);//Read a byte from EEPROM to RAM
 19c:	c8 01       	movw	r24, r16
 19e:	0e 94 a0 00 	call	0x140	; 0x140 <EEPROM_ReadByte>
 1a2:	f7 01       	movw	r30, r14
 1a4:	81 93       	st	Z+, r24
 1a6:	7f 01       	movw	r14, r30
		var_eepromAddress_16++;						//Increment the EEPROM Address
 1a8:	0f 5f       	subi	r16, 0xFF	; 255
 1aa:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;							//Increment the RAM Address
		var_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte
 1ac:	21 97       	sbiw	r28, 0x01	; 1
	##Note:	Care should be taken to allocate enough buffer to read the data.
 ***************************************************************************************************/
#if ( ENABLE_EEPROM_ReadNBytes == 1)
void EEPROM_ReadNBytes(uint16_t var_eepromAddress_16, uint8_t *ptr_ramAddress_u8, uint16_t var_numOfBytes_u16)
{
	while(var_numOfBytes_u16 !=  0)
 1ae:	b1 f7       	brne	.-20     	; 0x19c <EEPROM_ReadNBytes+0x16>
		var_eepromAddress_16++;						//Increment the EEPROM Address
		ptr_ramAddress_u8++;							//Increment the RAM Address
		var_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte

	}
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	ff 90       	pop	r15
 1ba:	ef 90       	pop	r14
 1bc:	08 95       	ret

000001be <I2C_Init>:
 * description :This function is used to initialize the I2C module

------------------------------------------------------------------------------------*/
void I2C_Init()
{
  TWSR=0x00; //set presca1er bits to zero
 1be:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  TWBR=0x46; //SCL frequency is 50K for 16Mhz
 1c2:	86 e4       	ldi	r24, 0x46	; 70
 1c4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  TWCR=0x04; //enab1e TWI module
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1ce:	08 95       	ret

000001d0 <I2C_Start>:
                      ____|         |____________

***************************************************************************************************/
void I2C_Start()
{
  TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
 1d0:	84 ea       	ldi	r24, 0xA4	; 164
 1d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  while (!(TWCR & (1<<TWINT)));
 1d6:	ec eb       	ldi	r30, 0xBC	; 188
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	88 23       	and	r24, r24
 1de:	ec f7       	brge	.-6      	; 0x1da <I2C_Start+0xa>
}
 1e0:	08 95       	ret

000001e2 <I2C_Stop>:

***************************************************************************************************/

void I2C_Stop(void)
{
  TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
 1e2:	84 e9       	ldi	r24, 0x94	; 148
 1e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e8:	81 e2       	ldi	r24, 0x21	; 33
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <I2C_Stop+0x8>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <I2C_Write>:


***************************************************************************************************/
void I2C_Write(uint8_t var_i2cData_u8)
{
  TWDR = var_i2cData_u8 ;
 1f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = ((1<< TWINT) | (1<<TWEN));
 1f6:	84 e8       	ldi	r24, 0x84	; 132
 1f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  while (!(TWCR & (1 <<TWINT)));
 1fc:	ec eb       	ldi	r30, 0xBC	; 188
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	88 23       	and	r24, r24
 204:	ec f7       	brge	.-6      	; 0x200 <I2C_Write+0xe>
}
 206:	08 95       	ret

00000208 <I2C_Read>:


***************************************************************************************************/
uint8_t I2C_Read(uint8_t var_ackOption_u8)
{
 TWCR = ((1<< TWINT) | (1<<TWEN) | (var_ackOption_u8<<TWEA));
 208:	20 e4       	ldi	r18, 0x40	; 64
 20a:	82 9f       	mul	r24, r18
 20c:	c0 01       	movw	r24, r0
 20e:	11 24       	eor	r1, r1
 210:	84 68       	ori	r24, 0x84	; 132
 212:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
   while ( !(TWCR & (1 <<TWINT)));
 216:	ec eb       	ldi	r30, 0xBC	; 188
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	88 23       	and	r24, r24
 21e:	ec f7       	brge	.-6      	; 0x21a <I2C_Read+0x12>
   return TWDR;
 220:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 224:	08 95       	ret

00000226 <port_Init>:
#include "delay.h"
#include "rtc.h"

void port_Init()
{
    DDRD &= ~(0b111111);     // Sets PORT_D(0-5) as inputs
 226:	8a b1       	in	r24, 0x0a	; 10
 228:	80 7c       	andi	r24, 0xC0	; 192
 22a:	8a b9       	out	0x0a, r24	; 10
    PORTD |= 0b111111;       // Sets PORT_D(0-5) as pull-up resistor inputs
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	8f 63       	ori	r24, 0x3F	; 63
 230:	8b b9       	out	0x0b, r24	; 11
    
    DDRB |= 0b111;          // Sets PORT_B(0-3) as 3 inputs to a 3:8 DeMUX
 232:	84 b1       	in	r24, 0x04	; 4
 234:	87 60       	ori	r24, 0x07	; 7
 236:	84 b9       	out	0x04, r24	; 4
    PORTB &= ~(0b111);      // Sets the outputs as off
 238:	85 b1       	in	r24, 0x05	; 5
 23a:	88 7f       	andi	r24, 0xF8	; 248
 23c:	85 b9       	out	0x05, r24	; 5
 23e:	08 95       	ret

00000240 <main>:
}

int main(void)
{
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
 248:	ce 55       	subi	r28, 0x5E	; 94
 24a:	d1 09       	sbc	r29, r1
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
    port_Init();
 256:	0e 94 13 01 	call	0x226	; 0x226 <port_Init>
    RTC_Init();
 25a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <RTC_Init>
    disp_Init();
 25e:	0e 94 7f 00 	call	0xfe	; 0xfe <disp_Init>
    // Declares profiles and profile1, profile2 and profile3
    Profiles profiles;
    Profile profile1;
    Profile profile2;
    Profile profile3;
    profiles.profile1 = profile1;
 262:	8f e0       	ldi	r24, 0x0F	; 15
 264:	fe 01       	movw	r30, r28
 266:	be 96       	adiw	r30, 0x2e	; 46
 268:	de 01       	movw	r26, r28
 26a:	11 96       	adiw	r26, 0x01	; 1
 26c:	01 90       	ld	r0, Z+
 26e:	0d 92       	st	X+, r0
 270:	8a 95       	dec	r24
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x2c>
    profiles.profile2 = profile2;
 274:	8f e0       	ldi	r24, 0x0F	; 15
 276:	fe 01       	movw	r30, r28
 278:	fd 96       	adiw	r30, 0x3d	; 61
 27a:	de 01       	movw	r26, r28
 27c:	50 96       	adiw	r26, 0x10	; 16
 27e:	01 90       	ld	r0, Z+
 280:	0d 92       	st	X+, r0
 282:	8a 95       	dec	r24
 284:	e1 f7       	brne	.-8      	; 0x27e <main+0x3e>
    profiles.profile3 = profile3;
 286:	8f e0       	ldi	r24, 0x0F	; 15
 288:	fe 01       	movw	r30, r28
 28a:	e4 5b       	subi	r30, 0xB4	; 180
 28c:	ff 4f       	sbci	r31, 0xFF	; 255
 28e:	de 01       	movw	r26, r28
 290:	5f 96       	adiw	r26, 0x1f	; 31
 292:	01 90       	ld	r0, Z+
 294:	0d 92       	st	X+, r0
 296:	8a 95       	dec	r24
 298:	e1 f7       	brne	.-8      	; 0x292 <main+0x52>
    
    
    Profile_RESET();    // The reset is usesd to set all profiles to the zero profile
 29a:	0e 94 8c 01 	call	0x318	; 0x318 <Profile_RESET>
    Profile_LOAD(&profiles);
 29e:	ce 01       	movw	r24, r28
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Profile_LOAD>
    
    // Sets the RTC Time
    Time t;     // Typedef in rtc.h
    t.hour  = 0x00;
 2a6:	6c 96       	adiw	r28, 0x1c	; 28
 2a8:	1f ae       	std	Y+63, r1	; 0x3f
 2aa:	6c 97       	sbiw	r28, 0x1c	; 28
    t.min   = 0x00;
 2ac:	6d 96       	adiw	r28, 0x1d	; 29
 2ae:	1f ae       	std	Y+63, r1	; 0x3f
 2b0:	6d 97       	sbiw	r28, 0x1d	; 29
    t.sec   = 0x00;
 2b2:	6e 96       	adiw	r28, 0x1e	; 30
 2b4:	1f ae       	std	Y+63, r1	; 0x3f
 2b6:	6e 97       	sbiw	r28, 0x1e	; 30
    
    RTC_SetTime(t.hour, t.min, t.sec);
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 ed 01 	call	0x3da	; 0x3da <RTC_SetTime>
    // bit 3:   up
    // bit 4:   down
    // bit 5:   set_feed
    // bit 6:   manual dispense 
    // bit 7:   none 
    uint8_t previous = 0b0;  // Stores the previous state of the buttons for positive edge triggering    
 2c2:	6f 96       	adiw	r28, 0x1f	; 31
 2c4:	1f ae       	std	Y+63, r1	; 0x3f
 2c6:	6f 97       	sbiw	r28, 0x1f	; 31
    uint8_t feed_Status = 0;
    while (1) 
    {
        button_Pressed = button_Get(&previous);
        button_Action(button_Pressed);
        RTC_GetTime(&t.hour, &t.min, &t.sec);
 2c8:	0f 2e       	mov	r0, r31
 2ca:	fb e5       	ldi	r31, 0x5B	; 91
 2cc:	ef 2e       	mov	r14, r31
 2ce:	f1 2c       	mov	r15, r1
 2d0:	f0 2d       	mov	r31, r0
 2d2:	ec 0e       	add	r14, r28
 2d4:	fd 1e       	adc	r15, r29
 2d6:	22 e0       	ldi	r18, 0x02	; 2
 2d8:	e2 0e       	add	r14, r18
 2da:	f1 1c       	adc	r15, r1
 2dc:	0b e5       	ldi	r16, 0x5B	; 91
 2de:	10 e0       	ldi	r17, 0x00	; 0
 2e0:	0c 0f       	add	r16, r28
 2e2:	1d 1f       	adc	r17, r29
 2e4:	0f 5f       	subi	r16, 0xFF	; 255
 2e6:	1f 4f       	sbci	r17, 0xFF	; 255
    Buttons button_Pressed = None;
     
    uint8_t feed_Status = 0;
    while (1) 
    {
        button_Pressed = button_Get(&previous);
 2e8:	ce 01       	movw	r24, r28
 2ea:	82 5a       	subi	r24, 0xA2	; 162
 2ec:	9f 4f       	sbci	r25, 0xFF	; 255
 2ee:	0e 94 53 00 	call	0xa6	; 0xa6 <button_Get>
        button_Action(button_Pressed);
 2f2:	0e 94 7e 00 	call	0xfc	; 0xfc <button_Action>
        RTC_GetTime(&t.hour, &t.min, &t.sec);
 2f6:	a7 01       	movw	r20, r14
 2f8:	b8 01       	movw	r22, r16
 2fa:	ce 01       	movw	r24, r28
 2fc:	85 5a       	subi	r24, 0xA5	; 165
 2fe:	9f 4f       	sbci	r25, 0xFF	; 255
 300:	0e 94 0a 02 	call	0x414	; 0x414 <RTC_GetTime>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 304:	8f e9       	ldi	r24, 0x9F	; 159
 306:	96 e8       	ldi	r25, 0x86	; 134
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	81 50       	subi	r24, 0x01	; 1
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	20 40       	sbci	r18, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <main+0xca>
 312:	00 c0       	rjmp	.+0      	; 0x314 <main+0xd4>
 314:	00 00       	nop
 316:	e8 cf       	rjmp	.-48     	; 0x2e8 <main+0xa8>

00000318 <Profile_RESET>:

#include "profile.h"
#include "eeprom.h"


void Profile_RESET(void){
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	ad 97       	sbiw	r28, 0x2d	; 45
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
    profile.feed2 = 0;
    profile.feed3 = 0;
    
    // Declare a Profiles with the zero Profile all three profiles
    Profiles profiles;
    profiles.profile1 = profile;
 32c:	19 82       	std	Y+1, r1	; 0x01
 32e:	1a 82       	std	Y+2, r1	; 0x02
 330:	1b 82       	std	Y+3, r1	; 0x03
 332:	1c 82       	std	Y+4, r1	; 0x04
 334:	1d 82       	std	Y+5, r1	; 0x05
 336:	1e 82       	std	Y+6, r1	; 0x06
 338:	1f 82       	std	Y+7, r1	; 0x07
 33a:	18 86       	std	Y+8, r1	; 0x08
 33c:	19 86       	std	Y+9, r1	; 0x09
 33e:	1a 86       	std	Y+10, r1	; 0x0a
 340:	1b 86       	std	Y+11, r1	; 0x0b
 342:	1c 86       	std	Y+12, r1	; 0x0c
 344:	1d 86       	std	Y+13, r1	; 0x0d
 346:	1e 86       	std	Y+14, r1	; 0x0e
 348:	1f 86       	std	Y+15, r1	; 0x0f
    profiles.profile2 = profile;
 34a:	18 8a       	std	Y+16, r1	; 0x10
 34c:	19 8a       	std	Y+17, r1	; 0x11
 34e:	1a 8a       	std	Y+18, r1	; 0x12
 350:	1b 8a       	std	Y+19, r1	; 0x13
 352:	1c 8a       	std	Y+20, r1	; 0x14
 354:	1d 8a       	std	Y+21, r1	; 0x15
 356:	1e 8a       	std	Y+22, r1	; 0x16
 358:	1f 8a       	std	Y+23, r1	; 0x17
 35a:	18 8e       	std	Y+24, r1	; 0x18
 35c:	19 8e       	std	Y+25, r1	; 0x19
 35e:	1a 8e       	std	Y+26, r1	; 0x1a
 360:	1b 8e       	std	Y+27, r1	; 0x1b
 362:	1c 8e       	std	Y+28, r1	; 0x1c
 364:	1d 8e       	std	Y+29, r1	; 0x1d
 366:	1e 8e       	std	Y+30, r1	; 0x1e
    profiles.profile3 = profile;
 368:	1f 8e       	std	Y+31, r1	; 0x1f
 36a:	18 a2       	std	Y+32, r1	; 0x20
 36c:	19 a2       	std	Y+33, r1	; 0x21
 36e:	1a a2       	std	Y+34, r1	; 0x22
 370:	1b a2       	std	Y+35, r1	; 0x23
 372:	1c a2       	std	Y+36, r1	; 0x24
 374:	1d a2       	std	Y+37, r1	; 0x25
 376:	1e a2       	std	Y+38, r1	; 0x26
 378:	1f a2       	std	Y+39, r1	; 0x27
 37a:	18 a6       	std	Y+40, r1	; 0x28
 37c:	19 a6       	std	Y+41, r1	; 0x29
 37e:	1a a6       	std	Y+42, r1	; 0x2a
 380:	1b a6       	std	Y+43, r1	; 0x2b
 382:	1c a6       	std	Y+44, r1	; 0x2c
 384:	1d a6       	std	Y+45, r1	; 0x2d

    // Write the profile to EEPROM memory
    char eeprom_address = 0x00;
    EEPROM_WriteNBytes(eeprom_address, &profiles, sizeof(Profiles));
 386:	4d e2       	ldi	r20, 0x2D	; 45
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	be 01       	movw	r22, r28
 38c:	6f 5f       	subi	r22, 0xFF	; 255
 38e:	7f 4f       	sbci	r23, 0xFF	; 255
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 a7 00 	call	0x14e	; 0x14e <EEPROM_WriteNBytes>
} 
 398:	ad 96       	adiw	r28, 0x2d	; 45
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <Profile_LOAD>:

void Profile_LOAD(Profiles* profiles){
    char eeprom_address = 0x00;
    EEPROM_ReadNBytes(eeprom_address, profiles, sizeof(Profiles));
 3aa:	4d e2       	ldi	r20, 0x2D	; 45
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	bc 01       	movw	r22, r24
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 c3 00 	call	0x186	; 0x186 <EEPROM_ReadNBytes>
 3b8:	08 95       	ret

000003ba <RTC_Init>:
	I2C_Write(var_day_u8);			      // Write date on RAM address 04H
	I2C_Write(var_month_u8);			      // Write month on RAM address 05H
	I2C_Write(var_year_u8);			      // Write year on RAM address 06h

	I2C_Stop();				              // Stop I2C communication after Setting the Date
}
 3ba:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_Init>
 3be:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <I2C_Start>
 3c2:	80 ed       	ldi	r24, 0xD0	; 208
 3c4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
 3c8:	87 e0       	ldi	r24, 0x07	; 7
 3ca:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
 3d4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <I2C_Stop>
 3d8:	08 95       	ret

000003da <RTC_SetTime>:
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	c8 2f       	mov	r28, r24
 3e2:	d6 2f       	mov	r29, r22
 3e4:	14 2f       	mov	r17, r20
 3e6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <I2C_Start>
 3ea:	80 ed       	ldi	r24, 0xD0	; 208
 3ec:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
 3f6:	81 2f       	mov	r24, r17
 3f8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
 3fc:	8d 2f       	mov	r24, r29
 3fe:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
 402:	8c 2f       	mov	r24, r28
 404:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
 408:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <I2C_Stop>
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	08 95       	ret

00000414 <RTC_GetTime>:

	Note: The time read from Ds1307 will be of BCD format, 
	      like 0x12,0x39,0x26 for 12hr,39min and 26sec.	
***************************************************************************************************/
void RTC_GetTime(uint8_t *ptr_hour_u8,uint8_t *ptr_min_u8,uint8_t *ptr_sec_u8)
{
 414:	ef 92       	push	r14
 416:	ff 92       	push	r15
 418:	0f 93       	push	r16
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	ec 01       	movw	r28, r24
 422:	8b 01       	movw	r16, r22
 424:	7a 01       	movw	r14, r20
	I2C_Start();                            // Start I2C communication
 426:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <I2C_Start>

	I2C_Write(C_Ds1307WriteMode_U8);	    // connect to DS1307 by sending its ID on I2c Bus
 42a:	80 ed       	ldi	r24, 0xD0	; 208
 42c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
	I2C_Write(C_Ds1307SecondRegAddress_U8); // Request Sec RAM address at 00H
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>

	I2C_Stop();			                    // Stop I2C communication after selecting Sec Register
 436:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <I2C_Stop>

	I2C_Start();		                    // Start I2C communication
 43a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <I2C_Start>
	I2C_Write(C_Ds1307ReadMode_U8);	        // connect to DS1307(Read mode) by sending its ID
 43e:	81 ed       	ldi	r24, 0xD1	; 209
 440:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>

	*ptr_sec_u8 = I2C_Read(1);                // read second and return Positive ACK
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Read>
 44a:	f7 01       	movw	r30, r14
 44c:	80 83       	st	Z, r24
	*ptr_min_u8 = I2C_Read(1); 	            // read minute and return Positive ACK
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Read>
 454:	f8 01       	movw	r30, r16
 456:	80 83       	st	Z, r24
	*ptr_hour_u8 = I2C_Read(0);               // read hour and return Negative/No ACK
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Read>
 45e:	88 83       	st	Y, r24

	I2C_Stop();		                        // Stop I2C communication after reading the Time
 460:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <I2C_Stop>
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	ff 90       	pop	r15
 46e:	ef 90       	pop	r14
 470:	08 95       	ret

00000472 <_exit>:
 472:	f8 94       	cli

00000474 <__stop_program>:
 474:	ff cf       	rjmp	.-2      	; 0x474 <__stop_program>
