
Feed Dispenser Backend.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000552  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000584  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000185d  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d48  00000000  00000000  00001f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ada  00000000  00000000  00002cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000030c  00000000  00000000  000037ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000765  00000000  00000000  00003ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000098b  00000000  00000000  0000421d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00004ba8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  9e:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <button_Get>:
// Bit 4:   Down
// Bit 5:   Set_Feed
// Bit 6:   None
// Bit 7:   (Not used/don't care)
Buttons button_Get(uint8_t* previous)
{
  a6:	fc 01       	movw	r30, r24
    // Reads the buttons for positive edge triggering
    for(int port_Num = 0; port_Num < NUM_OF_INPUTS; port_Num++)
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
	{
        // If an button is just pressed (rising edge), then return the button pressed
        if(((PINB & (0b1 << port_Num)) != 0) && 
  ac:	23 b1       	in	r18, 0x03	; 3
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	04 2e       	mov	r0, r20
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <button_Get+0x12>
  b4:	35 95       	asr	r19
  b6:	27 95       	ror	r18
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <button_Get+0xe>
  bc:	20 ff       	sbrs	r18, 0
  be:	17 c0       	rjmp	.+46     	; 0xee <button_Get+0x48>
			((*previous & (0b1 << port_Num)) != 0))
  c0:	90 81       	ld	r25, Z
{
    // Reads the buttons for positive edge triggering
    for(int port_Num = 0; port_Num < NUM_OF_INPUTS; port_Num++)
	{
        // If an button is just pressed (rising edge), then return the button pressed
        if(((PINB & (0b1 << port_Num)) != 0) && 
  c2:	29 2f       	mov	r18, r25
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	04 2e       	mov	r0, r20
  c8:	02 c0       	rjmp	.+4      	; 0xce <button_Get+0x28>
  ca:	35 95       	asr	r19
  cc:	27 95       	ror	r18
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <button_Get+0x24>
  d2:	20 ff       	sbrs	r18, 0
  d4:	0c c0       	rjmp	.+24     	; 0xee <button_Get+0x48>
			((*previous & (0b1 << port_Num)) != 0))
			{
                *previous |= (0b1 << port_Num);
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	04 2e       	mov	r0, r20
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <button_Get+0x3c>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <button_Get+0x38>
  e6:	92 2b       	or	r25, r18
  e8:	90 83       	st	Z, r25
                return (Buttons) port_Num;
  ea:	84 2f       	mov	r24, r20
  ec:	08 95       	ret
// Bit 6:   None
// Bit 7:   (Not used/don't care)
Buttons button_Get(uint8_t* previous)
{
    // Reads the buttons for positive edge triggering
    for(int port_Num = 0; port_Num < NUM_OF_INPUTS; port_Num++)
  ee:	4f 5f       	subi	r20, 0xFF	; 255
  f0:	5f 4f       	sbci	r21, 0xFF	; 255
  f2:	46 30       	cpi	r20, 0x06	; 6
  f4:	51 05       	cpc	r21, r1
  f6:	d1 f6       	brne	.-76     	; 0xac <button_Get+0x6>
			{
                *previous |= (0b1 << port_Num);
                return (Buttons) port_Num;
            }
	}
    return None;   // If no buttons have been pressed return NO_INPUTS
  f8:	86 e0       	ldi	r24, 0x06	; 6
}
  fa:	08 95       	ret

000000fc <button_Action>:

void button_Action(
        Buttons button_Pressed, Profiles* profiles, 
        uint8_t* profile_Number, uint8_t* clock_Current,
        uint8_t* change_Flag)
{
  fc:	8f 92       	push	r8
  fe:	9f 92       	push	r9
 100:	af 92       	push	r10
 102:	bf 92       	push	r11
 104:	cf 92       	push	r12
 106:	df 92       	push	r13
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	ad 97       	sbiw	r28, 0x2d	; 45
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
 122:	f8 2e       	mov	r15, r24
 124:	6b 01       	movw	r12, r22
 126:	4a 01       	movw	r8, r20
 128:	59 01       	movw	r10, r18
	// a jump table directly solves this without the extra comparison

    // Load the profile
    
    Profiles profiles_Stored;
    Profile_LOAD(&profiles_Stored);
 12a:	ce 01       	movw	r24, r28
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	0e 94 19 02 	call	0x432	; 0x432 <Profile_LOAD>

	switch(button_Pressed)
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	f2 16       	cp	r15, r18
 136:	a1 f0       	breq	.+40     	; 0x160 <button_Action+0x64>
 138:	f2 16       	cp	r15, r18
 13a:	20 f0       	brcs	.+8      	; 0x144 <button_Action+0x48>
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	f8 12       	cpse	r15, r24
 140:	31 c0       	rjmp	.+98     	; 0x1a4 <button_Action+0xa8>
 142:	1b c0       	rjmp	.+54     	; 0x17a <button_Action+0x7e>
	{
		case Next_Profile:
			// Do stuff
			// next_Profile();
            if(*profile_Number == 3){
 144:	f4 01       	movw	r30, r8
 146:	80 81       	ld	r24, Z
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	19 f4       	brne	.+6      	; 0x152 <button_Action+0x56>
                *profile_Number = 2;
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	80 83       	st	Z, r24
 150:	03 c0       	rjmp	.+6      	; 0x158 <button_Action+0x5c>
            }
            else{
                (*profile_Number)++;
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	f4 01       	movw	r30, r8
 156:	80 83       	st	Z, r24
            }
            *change_Flag = 1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	f8 01       	movw	r30, r16
 15c:	80 83       	st	Z, r24
            break;
 15e:	22 c0       	rjmp	.+68     	; 0x1a4 <button_Action+0xa8>
        case Next_Clock:
			// Do stuff
			// next_Clock();
            if(*clock_Current == ALARM_3){
 160:	f5 01       	movw	r30, r10
 162:	80 81       	ld	r24, Z
 164:	83 30       	cpi	r24, 0x03	; 3
 166:	11 f4       	brne	.+4      	; 0x16c <button_Action+0x70>
                *clock_Current = CLOCK;
 168:	10 82       	st	Z, r1
 16a:	03 c0       	rjmp	.+6      	; 0x172 <button_Action+0x76>
            }else{
                (*clock_Current)++;
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	f5 01       	movw	r30, r10
 170:	80 83       	st	Z, r24
            }

            *change_Flag = 1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	f8 01       	movw	r30, r16
 176:	80 83       	st	Z, r24
			break;
 178:	15 c0       	rjmp	.+42     	; 0x1a4 <button_Action+0xa8>
		case Set_Alarm:
			// Do stuff
			// set_Alarm();
            if(*clock_Current != CLOCK){
 17a:	f5 01       	movw	r30, r10
 17c:	80 81       	ld	r24, Z
 17e:	88 23       	and	r24, r24
 180:	71 f0       	breq	.+28     	; 0x19e <button_Action+0xa2>
                (*profiles).profile[*profile_Number].alarmStatus[*clock_Current] ^= 1;
 182:	f4 01       	movw	r30, r8
 184:	90 81       	ld	r25, Z
 186:	ff e0       	ldi	r31, 0x0F	; 15
 188:	9f 9f       	mul	r25, r31
 18a:	c0 0c       	add	r12, r0
 18c:	d1 1c       	adc	r13, r1
 18e:	11 24       	eor	r1, r1
 190:	f6 01       	movw	r30, r12
 192:	e8 0f       	add	r30, r24
 194:	f1 1d       	adc	r31, r1
 196:	94 85       	ldd	r25, Z+12	; 0x0c
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	89 27       	eor	r24, r25
 19c:	84 87       	std	Z+12, r24	; 0x0c
                // XORs the alarm status with 0b1  to toggle it
            }
            *change_Flag = 1;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	f8 01       	movw	r30, r16
 1a2:	80 83       	st	Z, r24
			break;
		case None:
			// Do nothing
			return;
	}
}
 1a4:	ad 96       	adiw	r28, 0x2d	; 45
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	ff 90       	pop	r15
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	bf 90       	pop	r11
 1c0:	af 90       	pop	r10
 1c2:	9f 90       	pop	r9
 1c4:	8f 90       	pop	r8
 1c6:	08 95       	ret

000001c8 <disp_Init>:
#include "display.h"
#include "i2c.h"

void disp_Init()
{
    I2C_Init();         // Initalise the I2C module.
 1c8:	0e 94 44 01 	call	0x288	; 0x288 <I2C_Init>
    I2C_Start();        // Start the I2C communications.
 1cc:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Start>
    
    I2C_Write(C_DisplayWriteMode_U8);   // Selects the I2C LED Disp
 1d0:	82 ee       	ldi	r24, 0xE2	; 226
 1d2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>
    
    // test code
    I2C_Write(0x76);
 1d6:	86 e7       	ldi	r24, 0x76	; 118
 1d8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>
    I2C_Write(0x01);
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>
    I2C_Write(0x02);
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>
    I2C_Write(0x03);
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>
    I2C_Write(0x04);
 1ee:	84 e0       	ldi	r24, 0x04	; 4
 1f0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>
	// Do stuff
	
	I2C_Stop();
 1f4:	0e 94 56 01 	call	0x2ac	; 0x2ac <I2C_Stop>
 1f8:	08 95       	ret

000001fa <EEPROM_WriteByte>:
 * description: This function is used to write the data at specified EEPROM_address..

 **************************************************************************************************/
void EEPROM_WriteByte(uint16_t var_eepromAddress_u16, uint8_t var_eepromData_u8)
{
	while(util_IsBitSet(EECR,EEPE)); // Wait for completion of previous write.
 1fa:	f9 99       	sbic	0x1f, 1	; 31
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <EEPROM_WriteByte>
	                                 // EEPE will be cleared by hardware once Eeprom write is completed.

	EEAR = var_eepromAddress_u16;  //Load the eeprom address and data
 1fe:	92 bd       	out	0x22, r25	; 34
 200:	81 bd       	out	0x21, r24	; 33
	EEDR = var_eepromData_u8;
 202:	60 bd       	out	0x20, r22	; 32

	util_BitSet(EECR,EEMPE);    // Eeprom Master Write Enable
 204:	fa 9a       	sbi	0x1f, 2	; 31
	util_BitSet(EECR,EEPE);     // Start eeprom write by setting EEPE
 206:	f9 9a       	sbi	0x1f, 1	; 31
 208:	08 95       	ret

0000020a <EEPROM_ReadByte>:

 * description: This function is used to read the data from specified EEPROM_address.        
 ***************************************************************************************************/
uint8_t EEPROM_ReadByte(uint16_t var_eepromAddress_u16)
{
	while(util_IsBitSet(EECR,EEPE));  //Wait for completion of previous write if any.
 20a:	f9 99       	sbic	0x1f, 1	; 31
 20c:	fe cf       	rjmp	.-4      	; 0x20a <EEPROM_ReadByte>

	EEAR = var_eepromAddress_u16;    //Load the address from where the data needs to be read.
 20e:	92 bd       	out	0x22, r25	; 34
 210:	81 bd       	out	0x21, r24	; 33
	util_BitSet(EECR,EERE);   // start eeprom read by setting EERE
 212:	f8 9a       	sbi	0x1f, 0	; 31

	return EEDR;             // Return data from data register
 214:	80 b5       	in	r24, 0x20	; 32
}
 216:	08 95       	ret

00000218 <EEPROM_WriteNBytes>:
 * description:
            This function is used to write N-bytes of data at specified EEPROM_address.
 ***************************************************************************************************/
#if ( ENABLE_EEPROM_WriteNBytes == 1)
void EEPROM_WriteNBytes(uint16_t var_eepromAddress_u16, uint8_t *ptr_ramAddress_u8, uint16_t var_numOfBytes_u16)
{
 218:	ef 92       	push	r14
 21a:	ff 92       	push	r15
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	8c 01       	movw	r16, r24
 226:	7b 01       	movw	r14, r22
 228:	ea 01       	movw	r28, r20
	while(var_numOfBytes_u16 !=  0)
 22a:	20 97       	sbiw	r28, 0x00	; 0
 22c:	51 f0       	breq	.+20     	; 0x242 <EEPROM_WriteNBytes+0x2a>
	{
		EEPROM_WriteByte(var_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
 22e:	f7 01       	movw	r30, r14
 230:	61 91       	ld	r22, Z+
 232:	7f 01       	movw	r14, r30
 234:	c8 01       	movw	r24, r16
 236:	0e 94 fd 00 	call	0x1fa	; 0x1fa <EEPROM_WriteByte>
		var_eepromAddress_u16++;					   //Increment the Eeprom Address
 23a:	0f 5f       	subi	r16, 0xFF	; 255
 23c:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		var_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
 23e:	21 97       	sbiw	r28, 0x01	; 1
            This function is used to write N-bytes of data at specified EEPROM_address.
 ***************************************************************************************************/
#if ( ENABLE_EEPROM_WriteNBytes == 1)
void EEPROM_WriteNBytes(uint16_t var_eepromAddress_u16, uint8_t *ptr_ramAddress_u8, uint16_t var_numOfBytes_u16)
{
	while(var_numOfBytes_u16 !=  0)
 240:	b1 f7       	brne	.-20     	; 0x22e <EEPROM_WriteNBytes+0x16>
		EEPROM_WriteByte(var_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
		var_eepromAddress_u16++;					   //Increment the Eeprom Address
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		var_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
	}
}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	08 95       	ret

00000250 <EEPROM_ReadNBytes>:

	##Note:	Care should be taken to allocate enough buffer to read the data.
 ***************************************************************************************************/
#if ( ENABLE_EEPROM_ReadNBytes == 1)
void EEPROM_ReadNBytes(uint16_t var_eepromAddress_16, uint8_t *ptr_ramAddress_u8, uint16_t var_numOfBytes_u16)
{
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	8c 01       	movw	r16, r24
 25e:	7b 01       	movw	r14, r22
 260:	ea 01       	movw	r28, r20
	while(var_numOfBytes_u16 !=  0)
 262:	20 97       	sbiw	r28, 0x00	; 0
 264:	51 f0       	breq	.+20     	; 0x27a <EEPROM_ReadNBytes+0x2a>
	{
		*ptr_ramAddress_u8 = EEPROM_ReadByte(var_eepromAddress_16);//Read a byte from EEPROM to RAM
 266:	c8 01       	movw	r24, r16
 268:	0e 94 05 01 	call	0x20a	; 0x20a <EEPROM_ReadByte>
 26c:	f7 01       	movw	r30, r14
 26e:	81 93       	st	Z+, r24
 270:	7f 01       	movw	r14, r30
		var_eepromAddress_16++;						//Increment the EEPROM Address
 272:	0f 5f       	subi	r16, 0xFF	; 255
 274:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;							//Increment the RAM Address
		var_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte
 276:	21 97       	sbiw	r28, 0x01	; 1
	##Note:	Care should be taken to allocate enough buffer to read the data.
 ***************************************************************************************************/
#if ( ENABLE_EEPROM_ReadNBytes == 1)
void EEPROM_ReadNBytes(uint16_t var_eepromAddress_16, uint8_t *ptr_ramAddress_u8, uint16_t var_numOfBytes_u16)
{
	while(var_numOfBytes_u16 !=  0)
 278:	b1 f7       	brne	.-20     	; 0x266 <EEPROM_ReadNBytes+0x16>
		var_eepromAddress_16++;						//Increment the EEPROM Address
		ptr_ramAddress_u8++;							//Increment the RAM Address
		var_numOfBytes_u16--;						//Decrement NoOfBytes after Reading each Byte

	}
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	ff 90       	pop	r15
 284:	ef 90       	pop	r14
 286:	08 95       	ret

00000288 <I2C_Init>:
 * description :This function is used to initialize the I2C module

------------------------------------------------------------------------------------*/
void I2C_Init()
{
  TWSR=0x00; //set presca1er bits to zero
 288:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  TWBR=0x46; //SCL frequency is 50K for 16Mhz
 28c:	86 e4       	ldi	r24, 0x46	; 70
 28e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  TWCR=0x04; //enab1e TWI module
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 298:	08 95       	ret

0000029a <I2C_Start>:
                      ____|         |____________

***************************************************************************************************/
void I2C_Start()
{
  TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
 29a:	84 ea       	ldi	r24, 0xA4	; 164
 29c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  while (!(TWCR & (1<<TWINT)));
 2a0:	ec eb       	ldi	r30, 0xBC	; 188
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	88 23       	and	r24, r24
 2a8:	ec f7       	brge	.-6      	; 0x2a4 <I2C_Start+0xa>
}
 2aa:	08 95       	ret

000002ac <I2C_Stop>:

***************************************************************************************************/

void I2C_Stop(void)
{
  TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
 2ac:	84 e9       	ldi	r24, 0x94	; 148
 2ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	81 e2       	ldi	r24, 0x21	; 33
 2b4:	8a 95       	dec	r24
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <I2C_Stop+0x8>
 2b8:	00 00       	nop
 2ba:	08 95       	ret

000002bc <I2C_Write>:


***************************************************************************************************/
void I2C_Write(uint8_t var_i2cData_u8)
{
  TWDR = var_i2cData_u8 ;
 2bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = ((1<< TWINT) | (1<<TWEN));
 2c0:	84 e8       	ldi	r24, 0x84	; 132
 2c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  while (!(TWCR & (1 <<TWINT)));
 2c6:	ec eb       	ldi	r30, 0xBC	; 188
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	88 23       	and	r24, r24
 2ce:	ec f7       	brge	.-6      	; 0x2ca <I2C_Write+0xe>
}
 2d0:	08 95       	ret

000002d2 <I2C_Read>:


***************************************************************************************************/
uint8_t I2C_Read(uint8_t var_ackOption_u8)
{
 TWCR = ((1<< TWINT) | (1<<TWEN) | (var_ackOption_u8<<TWEA));
 2d2:	20 e4       	ldi	r18, 0x40	; 64
 2d4:	82 9f       	mul	r24, r18
 2d6:	c0 01       	movw	r24, r0
 2d8:	11 24       	eor	r1, r1
 2da:	84 68       	ori	r24, 0x84	; 132
 2dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
   while ( !(TWCR & (1 <<TWINT)));
 2e0:	ec eb       	ldi	r30, 0xBC	; 188
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	88 23       	and	r24, r24
 2e8:	ec f7       	brge	.-6      	; 0x2e4 <I2C_Read+0x12>
   return TWDR;
 2ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 2ee:	08 95       	ret

000002f0 <port_Init>:
#include "delay.h"
#include "rtc.h"

void port_Init()
{
    DDRD &= ~(0b111111);     // Sets PORT_D(0-5) as inputs
 2f0:	8a b1       	in	r24, 0x0a	; 10
 2f2:	80 7c       	andi	r24, 0xC0	; 192
 2f4:	8a b9       	out	0x0a, r24	; 10
    PORTD |= 0b111111;       // Sets PORT_D(0-5) as pull-up resistor inputs
 2f6:	8b b1       	in	r24, 0x0b	; 11
 2f8:	8f 63       	ori	r24, 0x3F	; 63
 2fa:	8b b9       	out	0x0b, r24	; 11
    
    DDRB |= 0b111;          // Sets PORT_B(0-3) as 3 inputs to a 3:8 DeMUX
 2fc:	84 b1       	in	r24, 0x04	; 4
 2fe:	87 60       	ori	r24, 0x07	; 7
 300:	84 b9       	out	0x04, r24	; 4
    PORTB &= ~(0b111);      // Sets the outputs as off
 302:	85 b1       	in	r24, 0x05	; 5
 304:	88 7f       	andi	r24, 0xF8	; 248
 306:	85 b9       	out	0x05, r24	; 5
 308:	08 95       	ret

0000030a <main>:
}

int main(void)
{
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	e4 97       	sbiw	r28, 0x34	; 52
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	f8 94       	cli
 318:	de bf       	out	0x3e, r29	; 62
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	cd bf       	out	0x3d, r28	; 61
    port_Init();
 31e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <port_Init>
    RTC_Init();
 322:	0e 94 21 02 	call	0x442	; 0x442 <RTC_Init>
    disp_Init();
 326:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <disp_Init>
    profiles.profile[0] = profile0;
    profiles.profile[1] = profile1;
    profiles.profile[2] = profile2;
    */
    
    Profile_RESET();    // The reset is used to set all profiles to the zero profile
 32a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Profile_RESET>
    Profile_LOAD(&profiles);
 32e:	ce 01       	movw	r24, r28
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	0e 94 19 02 	call	0x432	; 0x432 <Profile_LOAD>
    
    
    
    // Sets the RTC Time
    Time t;     // Typedef in rtc.h
    t.hour  = 0x00;
 336:	1e a6       	std	Y+46, r1	; 0x2e
    t.min   = 0x00;
 338:	1f a6       	std	Y+47, r1	; 0x2f
    t.sec   = 0x00;
 33a:	18 aa       	std	Y+48, r1	; 0x30
    
    RTC_SetTime(t.hour, t.min, t.sec);
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 31 02 	call	0x462	; 0x462 <RTC_SetTime>
    // bit 3:   up
    // bit 4:   down
    // bit 5:   set_feed
    // bit 6:   manual dispense 
    // bit 7:   none 
    uint8_t previous = 0b0;  // Stores the previous state of the buttons for positive edge triggering    
 346:	19 aa       	std	Y+49, r1	; 0x31
  
    Buttons button_Pressed = None;
    uint8_t profile_Number = 1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	8a ab       	std	Y+50, r24	; 0x32
    Profile profile_Selected = profiles.profile[profile_Number];
    uint8_t clock_Current = CLOCK;
 34c:	1b aa       	std	Y+51, r1	; 0x33
    uint8_t mode = TIME_MODE;
    uint8_t change_Flag = 0;
 34e:	1c aa       	std	Y+52, r1	; 0x34
    uint8_t feed_Status = 0;
    while (1) 
    {
        button_Pressed = button_Get(&previous);
 350:	ce 01       	movw	r24, r28
 352:	c1 96       	adiw	r24, 0x31	; 49
 354:	0e 94 53 00 	call	0xa6	; 0xa6 <button_Get>
        button_Action(button_Pressed, &profiles, &profile_Number,
 358:	8e 01       	movw	r16, r28
 35a:	0c 5c       	subi	r16, 0xCC	; 204
 35c:	1f 4f       	sbci	r17, 0xFF	; 255
 35e:	9e 01       	movw	r18, r28
 360:	2d 5c       	subi	r18, 0xCD	; 205
 362:	3f 4f       	sbci	r19, 0xFF	; 255
 364:	ae 01       	movw	r20, r28
 366:	4e 5c       	subi	r20, 0xCE	; 206
 368:	5f 4f       	sbci	r21, 0xFF	; 255
 36a:	be 01       	movw	r22, r28
 36c:	6f 5f       	subi	r22, 0xFF	; 255
 36e:	7f 4f       	sbci	r23, 0xFF	; 255
 370:	0e 94 7e 00 	call	0xfc	; 0xfc <button_Action>
                &clock_Current, &change_Flag);
        RTC_GetTime(&t.hour, &t.min, &t.sec);
 374:	ae 01       	movw	r20, r28
 376:	40 5d       	subi	r20, 0xD0	; 208
 378:	5f 4f       	sbci	r21, 0xFF	; 255
 37a:	be 01       	movw	r22, r28
 37c:	61 5d       	subi	r22, 0xD1	; 209
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	ce 01       	movw	r24, r28
 382:	8e 96       	adiw	r24, 0x2e	; 46
 384:	0e 94 4e 02 	call	0x49c	; 0x49c <RTC_GetTime>
        if(change_Flag == 1){
 388:	8c a9       	ldd	r24, Y+52	; 0x34
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	09 f4       	brne	.+2      	; 0x390 <main+0x86>
            // displayOnScreen(t) or dispOnScreen(feedMode)
            
            profile_Selected = profiles.profile[profile_Number]; // selected profile
             

            change_Flag = 0;
 38e:	1c aa       	std	Y+52, r1	; 0x34
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 390:	2f e9       	ldi	r18, 0x9F	; 159
 392:	86 e8       	ldi	r24, 0x86	; 134
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	21 50       	subi	r18, 0x01	; 1
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	90 40       	sbci	r25, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <main+0x8c>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <main+0x96>
 3a0:	00 00       	nop
 3a2:	d6 cf       	rjmp	.-84     	; 0x350 <main+0x46>

000003a4 <Profile_RESET>:

#include "profile.h"
#include "eeprom.h"


void Profile_RESET(void){
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	ec 97       	sbiw	r28, 0x3c	; 60
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
 3b8:	fe 01       	movw	r30, r28
 3ba:	31 96       	adiw	r30, 0x01	; 1
 3bc:	ce 01       	movw	r24, r28
 3be:	0a 96       	adiw	r24, 0x0a	; 10
 3c0:	dc 01       	movw	r26, r24
     
    // Declares a Profile with 0 for everything
    Profile profile;
    for(uint8_t count = 0; count < 3; count++){
        profile.alarm[count].hour = 0x00;
 3c2:	10 82       	st	Z, r1
        profile.alarm[count].min  = 0x00;
 3c4:	11 82       	std	Z+1, r1	; 0x01
        profile.alarm[count].sec  = 0x00;
 3c6:	12 82       	std	Z+2, r1	; 0x02
        profile.alarmStatus[count] = 0;
 3c8:	13 96       	adiw	r26, 0x03	; 3
 3ca:	1c 92       	st	X, r1
 3cc:	13 97       	sbiw	r26, 0x03	; 3
        profile.feed[count] = 0;
 3ce:	1d 92       	st	X+, r1
 3d0:	33 96       	adiw	r30, 0x03	; 3

void Profile_RESET(void){
     
    // Declares a Profile with 0 for everything
    Profile profile;
    for(uint8_t count = 0; count < 3; count++){
 3d2:	e8 17       	cp	r30, r24
 3d4:	f9 07       	cpc	r31, r25
 3d6:	a9 f7       	brne	.-22     	; 0x3c2 <Profile_RESET+0x1e>
        profile.feed[count] = 0;
    }
    
    // Declare a Profiles with the zero Profile all three profiles
    Profiles profiles;
    profiles.profile[0] = profile;
 3d8:	8f e0       	ldi	r24, 0x0F	; 15
 3da:	fe 01       	movw	r30, r28
 3dc:	31 96       	adiw	r30, 0x01	; 1
 3de:	de 01       	movw	r26, r28
 3e0:	50 96       	adiw	r26, 0x10	; 16
 3e2:	01 90       	ld	r0, Z+
 3e4:	0d 92       	st	X+, r0
 3e6:	8a 95       	dec	r24
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <Profile_RESET+0x3e>
    profiles.profile[1] = profile;
 3ea:	8f e0       	ldi	r24, 0x0F	; 15
 3ec:	fe 01       	movw	r30, r28
 3ee:	31 96       	adiw	r30, 0x01	; 1
 3f0:	de 01       	movw	r26, r28
 3f2:	5f 96       	adiw	r26, 0x1f	; 31
 3f4:	01 90       	ld	r0, Z+
 3f6:	0d 92       	st	X+, r0
 3f8:	8a 95       	dec	r24
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <Profile_RESET+0x50>
    profiles.profile[2] = profile;
 3fc:	8f e0       	ldi	r24, 0x0F	; 15
 3fe:	fe 01       	movw	r30, r28
 400:	31 96       	adiw	r30, 0x01	; 1
 402:	de 01       	movw	r26, r28
 404:	9e 96       	adiw	r26, 0x2e	; 46
 406:	01 90       	ld	r0, Z+
 408:	0d 92       	st	X+, r0
 40a:	8a 95       	dec	r24
 40c:	e1 f7       	brne	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>

    // Write the profile to EEPROM memory
    char eeprom_address = 0x00;
    EEPROM_WriteNBytes(eeprom_address, (uint8_t*) &profiles, sizeof(profiles));
 40e:	4d e2       	ldi	r20, 0x2D	; 45
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	be 01       	movw	r22, r28
 414:	60 5f       	subi	r22, 0xF0	; 240
 416:	7f 4f       	sbci	r23, 0xFF	; 255
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 0c 01 	call	0x218	; 0x218 <EEPROM_WriteNBytes>
    
} 
 420:	ec 96       	adiw	r28, 0x3c	; 60
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	f8 94       	cli
 426:	de bf       	out	0x3e, r29	; 62
 428:	0f be       	out	0x3f, r0	; 63
 42a:	cd bf       	out	0x3d, r28	; 61
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <Profile_LOAD>:

void Profile_LOAD(Profiles* profiles){
    char eeprom_address = 0x00;
    EEPROM_ReadNBytes(eeprom_address, (uint8_t*) profiles, sizeof(profiles));
 432:	42 e0       	ldi	r20, 0x02	; 2
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	bc 01       	movw	r22, r24
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 28 01 	call	0x250	; 0x250 <EEPROM_ReadNBytes>
 440:	08 95       	ret

00000442 <RTC_Init>:
	I2C_Write(var_day_u8);			      // Write date on RAM address 04H
	I2C_Write(var_month_u8);			      // Write month on RAM address 05H
	I2C_Write(var_year_u8);			      // Write year on RAM address 06h

	I2C_Stop();				              // Stop I2C communication after Setting the Date
}
 442:	0e 94 44 01 	call	0x288	; 0x288 <I2C_Init>
 446:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Start>
 44a:	80 ed       	ldi	r24, 0xD0	; 208
 44c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>
 450:	87 e0       	ldi	r24, 0x07	; 7
 452:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>
 45c:	0e 94 56 01 	call	0x2ac	; 0x2ac <I2C_Stop>
 460:	08 95       	ret

00000462 <RTC_SetTime>:
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	c8 2f       	mov	r28, r24
 46a:	d6 2f       	mov	r29, r22
 46c:	14 2f       	mov	r17, r20
 46e:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Start>
 472:	80 ed       	ldi	r24, 0xD0	; 208
 474:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>
 47e:	81 2f       	mov	r24, r17
 480:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>
 484:	8d 2f       	mov	r24, r29
 486:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>
 48a:	8c 2f       	mov	r24, r28
 48c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>
 490:	0e 94 56 01 	call	0x2ac	; 0x2ac <I2C_Stop>
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	1f 91       	pop	r17
 49a:	08 95       	ret

0000049c <RTC_GetTime>:

	Note: The time read from Ds1307 will be of BCD format, 
	      like 0x12,0x39,0x26 for 12hr,39min and 26sec.	
***************************************************************************************************/
void RTC_GetTime(uint8_t *ptr_hour_u8,uint8_t *ptr_min_u8,uint8_t *ptr_sec_u8)
{
 49c:	ef 92       	push	r14
 49e:	ff 92       	push	r15
 4a0:	0f 93       	push	r16
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	ec 01       	movw	r28, r24
 4aa:	8b 01       	movw	r16, r22
 4ac:	7a 01       	movw	r14, r20
	I2C_Start();                            // Start I2C communication
 4ae:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Start>

	I2C_Write(C_Ds1307WriteMode_U8);	    // connect to DS1307 by sending its ID on I2c Bus
 4b2:	80 ed       	ldi	r24, 0xD0	; 208
 4b4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>
	I2C_Write(C_Ds1307SecondRegAddress_U8); // Request Sec RAM address at 00H
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>

	I2C_Stop();			                    // Stop I2C communication after selecting Sec Register
 4be:	0e 94 56 01 	call	0x2ac	; 0x2ac <I2C_Stop>

	I2C_Start();		                    // Start I2C communication
 4c2:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Start>
	I2C_Write(C_Ds1307ReadMode_U8);	        // connect to DS1307(Read mode) by sending its ID
 4c6:	81 ed       	ldi	r24, 0xD1	; 209
 4c8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Write>

	*ptr_sec_u8 = I2C_Read(1);                // read second and return Positive ACK
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	0e 94 69 01 	call	0x2d2	; 0x2d2 <I2C_Read>
 4d2:	f7 01       	movw	r30, r14
 4d4:	80 83       	st	Z, r24
	*ptr_min_u8 = I2C_Read(1); 	            // read minute and return Positive ACK
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <I2C_Read>
 4dc:	f8 01       	movw	r30, r16
 4de:	80 83       	st	Z, r24
	*ptr_hour_u8 = I2C_Read(0);               // read hour and return Negative/No ACK
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <I2C_Read>
 4e6:	88 83       	st	Y, r24

	I2C_Stop();		                        // Stop I2C communication after reading the Time
 4e8:	0e 94 56 01 	call	0x2ac	; 0x2ac <I2C_Stop>
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	08 95       	ret

000004fa <_exit>:
 4fa:	f8 94       	cli

000004fc <__stop_program>:
 4fc:	ff cf       	rjmp	.-2      	; 0x4fc <__stop_program>
